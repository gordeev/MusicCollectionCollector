#!/usr/bin/env python3
import os
import time
import subprocess
import isodate
from typing import Optional
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–∫–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ —Å—Ç—Ä–æ–∫—É)
TRACKS_FILE = 'tracks.txt'
# –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
DELAY_SECONDS = 5
# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ (—Å–µ–∫—É–Ω–¥—ã) –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–æ–ª–∏–∫–æ–≤
MIN_DURATION_SEC = 60

# –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ñ–æ–ª–ª–±–µ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–∏ –∫–≤–æ—Ç—ã
USE_API = True

# –ß–∏—Ç–∞–µ–º API‚Äë–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv('YOUTUBE_API_KEY')
if not API_KEY:
    raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é YOUTUBE_API_KEY —Å —Ç–≤–æ–∏–º –∫–ª—é—á–æ–º")

# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç YouTube Data API
youtube = build('youtube', 'v3', developerKey=API_KEY)

def find_video_id_via_api(query: str) -> Optional[str]:
    """
    –ò—â–µ—Ç –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ YouTube Data API (maxResults=1),
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç videoId –∏–ª–∏ None.
    """
    resp = youtube.search().list(
        q=query,
        part='id',
        type='video',
        maxResults=1
    ).execute()

    items = resp.get('items', [])
    if not items:
        return None

    vid = items[0]['id']['videoId']
    details = youtube.videos().list(
        id=vid,
        part='contentDetails'
    ).execute().get('items', [])
    if not details:
        return None

    duration = isodate.parse_duration(
        details[0]['contentDetails']['duration']
    ).total_seconds()
    return vid if duration >= MIN_DURATION_SEC else None


def download_with_yt_dlp_search(query: str):
    """
    –§–æ–ª–ª–±–µ–∫: –∏—â–µ—Ç –∏ –∫–∞—á–∞–µ—Ç —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ yt-dlp (ytsearch1:).
    """
    cmd = [
        'yt-dlp',
        f'ytsearch1:{query}',
        '--no-playlist',
        '-x', '--audio-format', 'mp3',
        '--output', '%(title)s.%(ext)s'
    ]
    print(f'  üîÑ fallback yt-dlp search –¥–ª—è: {query!r}')
    subprocess.run(cmd, check=False)


def download_track(track: str) -> None:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ API‚Üíyt-dlp; –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫–≤–æ—Ç—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî
    —Ñ–æ–ª–ª–±–µ–∫ –Ω–∞ —á–∏—Å—Ç—ã–π yt-dlp.
    –ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —É–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ TRACKS_FILE, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ.
    """
    global USE_API
    print(f'‚ñ∫ –°–∫–∞—á–∏–≤–∞–µ–º: {track!r}')

    if USE_API:
        try:
            vid = find_video_id_via_api(track)
            if not vid:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ API")
            url = f'https://www.youtube.com/watch?v={vid}'
            print(f'  ‚Üí –Ω–∞–π–¥–µ–Ω videoId={vid}, –∫–∞—á–∞–µ–º‚Ä¶')
            subprocess.run([
                'yt-dlp',
                '--no-playlist',
                '-x', '--audio-format', 'mp3',
                '--output', '%(title)s.%(ext)s',
                url
            ], check=False)
        except HttpError as e:
            print(f'  ‚ö†Ô∏è API error: {e}')
            USE_API = False
            download_with_yt_dlp_search(track)
        except Exception as e:
            print(f'  ‚ö†Ô∏è fallback –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {e}')
            download_with_yt_dlp_search(track)
    else:
        download_with_yt_dlp_search(track)

    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open(TRACKS_FILE, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        with open(TRACKS_FILE, 'w', encoding='utf-8') as f:
            removed = False
            for line in lines:
                if not removed and line.strip() == track:
                    removed = True
                    continue
                f.write(line)
        print('  üóëÔ∏è –£–¥–∞–ª–∏–ª–∏ —Å—Ç—Ä–æ–∫—É –∏–∑ tracks.txt')
    except Exception as e:
        print(f'  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏: {e}')


def main():
    try:
        with open(TRACKS_FILE, encoding='utf-8') as f:
            tracks = [l.strip() for l in f if l.strip()]
    except FileNotFoundError:
        print(f"–§–∞–π–ª {TRACKS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    for idx, track in enumerate(tracks, start=1):
        print(f'[{idx}/{len(tracks)}]')
        download_track(track)
        if idx < len(tracks):
            print(f'–ñ–¥—ë–º {DELAY_SECONDS} —Å–µ–∫‚Ä¶')
            time.sleep(DELAY_SECONDS)

if __name__ == '__main__':
    main()
